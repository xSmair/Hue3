/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 05 11:38:28 GMT 2018
 */

package net.htlgrieskirchen.pos3.streams;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import net.htlgrieskirchen.pos3.streams.CombatType;
import net.htlgrieskirchen.pos3.streams.DamageType;
import net.htlgrieskirchen.pos3.streams.Streams;
import net.htlgrieskirchen.pos3.streams.Weapon;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Streams_ESTest extends Streams_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Streams streams0 = new Streams();
      String[] stringArray0 = new String[0];
      List<String> list0 = streams0.upperCase(stringArray0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Streams streams0 = new Streams();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "^t\"1N`D/NyL0u`.";
      stringArray0[1] = "";
      stringArray0[2] = "]D5$k";
      stringArray0[3] = "";
      stringArray0[4] = "cM0a)=%`7G0#JYd=v#";
      stringArray0[5] = "";
      List<String> list0 = streams0.upperCase(stringArray0);
      assertFalse(list0.contains("]D5$k"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.PIERCING;
      Weapon weapon0 = new Weapon("k:|8,hxR", combatType0, damageType0, 5060, 5060, 5060, 5);
      linkedList0.add(weapon0);
      int[] intArray0 = streams0.toSpeedArray(linkedList0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.PIERCING;
      Weapon weapon0 = new Weapon("k:|8,hxR", combatType0, damageType0, 5060, 5060, 5060, 5);
      linkedList0.add(weapon0);
      List<String> list0 = streams0.toNameList(linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.PIERCING;
      Weapon weapon0 = new Weapon("k:|8,hxR", combatType0, damageType0, 5060, 5060, 5060, 5);
      linkedList0.add(weapon0);
      int int0 = streams0.sumUpValues(linkedList0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.MISSILE;
      Weapon weapon0 = new Weapon("", combatType0, damageType0, 1, 1, 0, (-4052));
      linkedList0.add(weapon0);
      int int0 = streams0.sumUpValues(linkedList0);
      assertEquals((-4052), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.SLASHING;
      Weapon weapon0 = new Weapon("%\"]N)f5", combatType0, damageType0, (-1), (-1), (-1), 1155);
      linkedList0.add(weapon0);
      long long0 = streams0.sumUpHashCodes(linkedList0);
      //  // Unstable assertion: assertEquals(612071032L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.NONE;
      DamageType damageType0 = DamageType.MISSILE;
      Weapon weapon0 = new Weapon("net.htlgrieskirchen.pos3.streams.CombatType", combatType0, damageType0, 0, (-252), (-252), (-1));
      linkedList0.add(0, weapon0);
      long long0 = streams0.sumUpHashCodes(linkedList0);
      //  // Unstable assertion: assertEquals((-1678356734L), long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.PIERCING;
      Weapon weapon0 = new Weapon("k:|8,hxR", combatType0, damageType0, 5060, 5060, 5060, 5);
      linkedList0.add(weapon0);
      List<Weapon> list0 = streams0.removeDuplicates(linkedList0);
      assertTrue(list0.contains(weapon0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.MISSILE;
      Weapon weapon0 = new Weapon("SUF4x}5T9QGT#L~", combatType0, damageType0, (-2151), (-2151), (-2151), 0);
      weapon0.setValue((-2891));
      linkedList0.offerFirst(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLowestDamage(linkedList0);
      assertEquals(CombatType.MELEE, weapon1.getCombatType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.NONE;
      DamageType damageType0 = DamageType.NONE;
      Weapon weapon0 = new Weapon("", combatType0, damageType0, 0, 4, 0, 0);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLowestDamage(linkedList0);
      assertEquals(0, weapon1.getValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.NONE;
      Weapon weapon0 = new Weapon((String) null, combatType0, damageType0, 0, 0, 0, 0);
      linkedList0.addLast(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLowestDamage(linkedList0);
      assertEquals(DamageType.NONE, weapon1.getDamageType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.RANGED;
      DamageType damageType0 = DamageType.NONE;
      Weapon weapon0 = new Weapon("9", combatType0, damageType0, 451, 0, 451, 2237);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLowestDamage(linkedList0);
      assertEquals(0, weapon1.getSpeed());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.NONE;
      Weapon weapon0 = new Weapon("", combatType0, damageType0, 1552, 0, 1552, 0);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLongestName(linkedList0);
      assertEquals(1552, weapon1.getMinStrength());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.SLASHING;
      Weapon weapon0 = new Weapon(",rGJ>c]?,i", combatType0, damageType0, 0, (-1), 0, (-1743));
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLongestName(linkedList0);
      assertEquals(CombatType.MELEE, weapon1.getCombatType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.MISSILE;
      Weapon weapon0 = new Weapon("", combatType0, damageType0, 0, 0, (-1), 439);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLongestName(linkedList0);
      assertEquals(0, weapon1.getDamage());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.PIERCING;
      Weapon weapon0 = new Weapon("k:|8,hxR", combatType0, damageType0, 5060, 5060, 5060, 5);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLongestName(linkedList0);
      assertTrue(linkedList0.contains(weapon1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.NONE;
      DamageType damageType0 = DamageType.PIERCING;
      Weapon weapon0 = new Weapon((String) null, combatType0, damageType0, (-1116), 1, 1, (-1116));
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithLongestName(linkedList0);
      assertEquals(1, weapon1.getMinStrength());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.NONE;
      DamageType damageType0 = DamageType.MISSILE;
      Weapon weapon0 = new Weapon("net.htlgrieskirchen.pos3.streams.CombatType", combatType0, damageType0, 0, (-252), (-252), (-1));
      linkedList0.add(0, weapon0);
      Weapon weapon1 = streams0.findWeaponWithHighestStrength(linkedList0);
      assertEquals((-252), weapon1.getSpeed());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.BLUNT;
      Weapon weapon0 = new Weapon("", combatType0, damageType0, 1193, 1193, 1193, 1);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithHighestStrength(linkedList0);
      assertEquals(DamageType.BLUNT, weapon1.getDamageType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.NONE;
      DamageType damageType0 = DamageType.BLUNT;
      Weapon weapon0 = new Weapon((String) null, combatType0, damageType0, (-1), 0, 0, 0);
      linkedList0.add(weapon0);
      Weapon weapon1 = streams0.findWeaponWithHighestStrength(linkedList0);
      assertNull(weapon1.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.NONE;
      DamageType damageType0 = DamageType.MISSILE;
      Weapon weapon0 = new Weapon("net.htlgrieskirchen.pos3.streams.CombatType", combatType0, damageType0, 0, (-252), (-252), (-1));
      linkedList0.add(0, weapon0);
      List<Weapon> list0 = streams0.collectMissileWeapons(linkedList0);
      assertTrue(list0.contains(weapon0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Streams streams0 = new Streams();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      double double0 = streams0.average(intArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Streams streams0 = new Streams();
      int[] intArray0 = new int[3];
      intArray0[0] = (-4052);
      double double0 = streams0.average(intArray0);
      assertEquals((-1350.6666666666667), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      linkedList0.add(null);
      // Undeclared exception!
      try { 
        streams0.toSpeedArray(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$4$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      List<Weapon> list0 = linkedList0.subList(0, 0);
      linkedList0.add(null);
      // Undeclared exception!
      try { 
        streams0.toNameList(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Streams streams0 = new Streams();
      // Undeclared exception!
      try { 
        streams0.toNameList((List<Weapon>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.htlgrieskirchen.pos3.streams.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      linkedList0.addLast(null);
      // Undeclared exception!
      try { 
        streams0.sumUpValues(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Streams streams0 = new Streams();
      // Undeclared exception!
      try { 
        streams0.sumUpHashCodes((List<Weapon>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.htlgrieskirchen.pos3.streams.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Streams streams0 = new Streams();
      // Undeclared exception!
      try { 
        streams0.removeDuplicates((List<Weapon>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.htlgrieskirchen.pos3.streams.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Streams streams0 = new Streams();
      // Undeclared exception!
      try { 
        streams0.increaseValuesByTenPercent((List<Weapon>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.htlgrieskirchen.pos3.streams.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      CombatType combatType0 = CombatType.MELEE;
      DamageType damageType0 = DamageType.MISSILE;
      List<Weapon> list0 = linkedList0.subList(0, 0);
      Weapon weapon0 = new Weapon("", combatType0, damageType0, 1, 1, 0, (-4052));
      linkedList0.add(weapon0);
      // Undeclared exception!
      try { 
        streams0.findWeaponWithLowestDamage(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      linkedList0.addFirst(null);
      // Undeclared exception!
      try { 
        streams0.findWeaponWithLowestDamage(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      linkedList0.add(null);
      // Undeclared exception!
      try { 
        streams0.findWeaponWithLongestName(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      linkedList0.push(null);
      // Undeclared exception!
      try { 
        streams0.findWeaponWithHighestStrength(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Streams streams0 = new Streams();
      // Undeclared exception!
      try { 
        streams0.collectMissileWeapons((List<Weapon>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.htlgrieskirchen.pos3.streams.Streams", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Streams streams0 = new Streams();
      // Undeclared exception!
      try { 
        streams0.average((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Streams streams0 = new Streams();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        streams0.upperCase(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.stream.ReferencePipeline$3$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      List<Weapon> list0 = streams0.collectMissileWeapons(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Streams streams0 = new Streams();
      int[] intArray0 = new int[1];
      double double0 = streams0.average(intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      streams0.increaseValuesByTenPercent(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      List<Weapon> list0 = streams0.removeDuplicates(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      int int0 = streams0.sumUpValues(linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      List<String> list0 = streams0.toNameList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      int[] intArray0 = streams0.toSpeedArray(linkedList0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      Weapon weapon0 = streams0.findWeaponWithHighestStrength(linkedList0);
      assertNull(weapon0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      Weapon weapon0 = streams0.findWeaponWithLongestName(linkedList0);
      assertNull(weapon0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      long long0 = streams0.sumUpHashCodes(linkedList0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Streams streams0 = new Streams();
      LinkedList<Weapon> linkedList0 = new LinkedList<Weapon>();
      Weapon weapon0 = streams0.findWeaponWithLowestDamage(linkedList0);
      assertNull(weapon0);
  }
}
